Design Pattern


    Singleton: 同一時間只能有固定數量物件實體

        ex: 租借腳踏車系統，腳踏車數量有限，
            必須由腳踏車業者控制腳踏車數量。

    
    Factory: 間接透過其他class(工廠)建立使用者要的物件

        ex: 想吃甜甜圈->到Mister Donut買甜甜圈->由Mister Donut工廠做出甜甜圈
        

    FactoryMethod: Factory的彈性化版，可以指定工廠產出符合特定條件的物件
    
        ex: 去飲料店點飲料，顧客(client)指定飲料店(工廠)要做出某種飲料
            飲料店即可照顧客的要求(條件)產生出特定的飲料(物件)。


    Prototype: 複製物件，當物件重新new再跑成現在狀態成本很高時，
               即可用複製的方法產生新的物件
    
        ex: 上課筆記想要分享時，重新買個筆記本再重新抄筆記非常花時間，
            用影印的就快很多
        
    
    Adapter: 轉接器
    
        ex: 接收資料時有word.txt.json等等格式，實作個轉接器都轉換成需要的格式
    
    
    Bridge: 類似Adapter，但是Bridge是雙向通行
    
        ex: 分析圖片時，圖片透過DCT(離散餘弦轉換)轉換成頻率域圖片，
            頻率域圖片分析修改完後可透過IDCT(反離散餘弦轉換)轉換回空間域圖片。


    Decorator: 裝飾，用加上其他介面的方式增加功能
    
        ex: 手機，當我下載手電筒APP手機就增加了手電筒功能，
            下載了QRcode讀取APP就增加了讀取QRcode功能。
            
    
    Facode: 將許多雜亂的程式都由同一支程式去執行
    
        ex: 賣衣服、賣鞋子、賣化妝品、賣食物、賣珠寶古董等等商店，
            將它們集中到百貨公司統一管理販賣。
    
    
    Observer: 當一個主題內容改變時，自動通知所有觀察者作相對應的動作
    
        ex: 星巴克的FB粉絲團，粉絲可以選擇加入或退出粉絲團，
            當星巴克有活動時在粉絲團PO文通知粉絲，
            粉絲即可選擇是否參加活動。
    
    
    Command: 當有許多客戶要求都不一樣時，將各個物件分開來各自獨立
             透過一個控制器發出指令去使用這些物件
    
        ex: 到工廠進貨，顧客指定好訂單內容後，由員工將這次的訂單給出訂單編號，
            再送到工廠去生產貨物交給顧客。

